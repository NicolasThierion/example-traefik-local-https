version: "3"

services:
  traefik:
    image: traefik:v2.4
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.api.address=:3000
      # redirect http => https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - public
      - traefik-internal
  server:
    image: myapp-server
    depends_on:
      - traefik
    build:
      context: server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.myapp-api.rule=Host(`${MYAPP_HOST}`)"
      # - "traefik.http.services.server.loadbalancer.server.port=8080"
      # enable https
      - "traefik.http.routers.myapp-api.entrypoints=api"
      - "traefik.http.routers.myapp-api.tls=true"
      - "traefik.docker.network=traefik-internal"
    networks:
      - traefik-internal
  client:
    image: nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.myapp-client.rule=Host(`${MYAPP_HOST}`)"
      # enable https
      - "traefik.http.routers.myapp-client.entrypoints=websecure"
      - "traefik.http.routers.myapp-client.tls=true"
      - "traefik.docker.network=traefik-internal"
    networks:
      - public
    volumes:
      - ./client/src:/usr/share/nginx/html:ro

networks:
  public:
  traefik-internal:
    name: traefik-internal # docker-compose will prefix the network name otherwise.
